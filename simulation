## ADVANCED ECONOMETRICS
#
#  SIMULATE DATA FROM AR(1)
#
#  Description:
#  This code snippet shows how to simulate data from a Gaussian
#  autoregressive model (AR) of order 1 given by:
#
#   x(t) = alpha + beta * x(t-1) + epsilon(t)
#
#  with NID(0,sigma^2) innovations {epsilon(t)}.
#
#  Francisco Blasques 2019

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
## 1. Setup

def Xvar (T):
    T=100;  # sample size

    ## 2. Parameter Values

    alpha = 1;    # intercept parameter
    beta = 0.9;   # autoregressive parameter
    sigma = 0.1;  # standard error of innovations
    x1 = alpha/(1-beta) # define initial value for time series x

## 3. Generate Innovations

    epsilon = sigma*np.random.randn(T,1); # generate a vector of T random normal
                                          # variables with variance sigma^2

## 4. Define Time Series Vector

    x = np.zeros((T,1)); # define vector of zeros of length T

## 5. Define Initialization for Time Series

    x[0,:] = x1;

## 6. Generate Time Series

    for t in range(1, T):
        x[t,:] = alpha + beta * x[t-1,:] + epsilon[t,:] # generate x(t) recursively

## 7. Print Time Series in Command Window

    print(x) # display the values of x

## 8. Plot Data

    f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
    ax1.plot(x)
    ax1.set_title('data')
    ax2.hist(x,bins=20)
    plt.show()
Xvar(100)


def regression (T):
    T=100; 
    alpha = 0.9
    beta = 0.5
    sigma = 0.1
    epsilon = sigma*np.random.randn(T,1)
    epsilont_1 = sigma*np.random.randn(T,1)
    y1 = 0

    x = Xvar(100)

    y = np.zeros((T,1)); # define vector of zeros of length T

    y[0,:] = y1

    for t in range(1, T):
        y[t,:] = alpha * x[t,:] + epsilon[t,:] + beta * epsilont_1[t,:] 


    print(y) 
regression(100)

